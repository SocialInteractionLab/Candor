---
title: "CANDOR - Annotation Checks"
author: "Helen Schmidt"
date-modified: today
format: html
toc: true
self-contained: true
---

## load packages
```{r}
# packages
library(scales)
library(tidyverse)
```

## load and format data
```{r}
# load data
df <- read.csv("/Users/helenschmidt/Library/CloudStorage/GoogleDrive-helenschmidt129@gmail.com/My Drive/SANLab/Experiments/CANDOR/analysis/data/dense_subset1_and_subset2_processed.csv")

# preview
head(df)

# rename participant ID column
names(df)[21] <- "PID"

# print number of conversations
df |> summarize(num_convos = length(unique(transcript_id))) 
# print number of participants
df |> summarize(num_PID = length(unique(PID)))

# rescale turn ids so each convo is 0 - 1
df <- df |>
  group_by(transcript_id) |>
  mutate(scaled_turn_id = rescale(turn_id))
```

## annotation count
```{r}
# how many annotations did participants make on average?
df |>
  select(PID, new_topic) |>
  group_by(PID) |>
  summarize(annotation_count = length(unique(new_topic))) |>
  summarize(mean_count = mean(annotation_count),
            sd_count = sd(annotation_count),
            mean_plus_3sd = mean_count + (3*sd_count),
            mean_minus_3sd = mean_count - (3*sd_count))

# how long did the task take on average?
df |>
  select(PID, time) |>
  filter(!is.na(time)) |>
  group_by(PID) |>
  summarize(elapsed_time = (max(time) - min(time))/60000) |> # change elapsed time to minutes
  summarize(mean_elapsed_time = mean(elapsed_time),
            sd_elapsed_time = sd(elapsed_time),
            mean_plus_3sd = mean_elapsed_time + (3*sd_elapsed_time),
            mean_minus_3sd = mean_elapsed_time - (3*sd_elapsed_time))

```

## jaccard similarity
```{r}
# how similar are topic changes between participants who annotated same conversation?

# define jaccard similarity function
jaccard <- function(a, b) {
    intersection = length(intersect(a, b))
    union = length(a) + length(b) - intersection
    return (intersection/union)}

# identify topic changes across participants per transcript ID
topics <- df |>
  select(PID, transcript_id, turn_id, new_topic) |>
  filter(!is.na(new_topic)) |> # keep only topic change turns
  group_by(transcript_id) |>
  filter(n_distinct(PID) > 1) |> # keep only transcripts with 2+ PIDs
  ungroup() |>
  group_by(transcript_id, new_topic, PID) |>
  summarise(turn_id = mean(turn_id), .groups = 'drop') |>
  ungroup() |>
  pivot_wider(names_from = PID,
              values_from = turn_id,
              values_fill = NA) |>
  select(-new_topic)

# loop through transcript IDs and calculate jaccard similarity
annotation_similarity <- data.frame(transcript_id = character(), 
                                    PID_1 = character(), 
                                    PID_2 = character(), 
                                    jaccard_similarity = numeric())
for (i in unique(topics$transcript_id)) {
  # subset to only this loop's transcript
  subset <- subset(topics, transcript_id == i)
  # remove PID columns that didn't annotate (i.e., all obs = NA)
  subset <- subset |> select(where(~ !all(is.na(.))))
  # get lists of all participant annotation values
  list_of_values <- lapply(subset, unique)
  # remove list of transcript_id
  extracted_values <- list_of_values[-1]
  # dynamically assign the extracted lists to separate variables
  for (j in seq_along(extracted_values)) {
    clean <- na.omit(extracted_values[[j]])
    assign(paste0("PID_", j), clean)}
  # compare lists of PID values
  pid_values = lapply(ls(pattern = "^PID_"), get)
  # pairwise jaccard similarity
  pairwise_jaccard <- combn(pid_values, 2, function(x) {
    list(jaccard_similarity = jaccard(x[[1]], x[[2]]))
  })
  # save into annotation_similarity data frame
  this_loop <- data.frame(transcript_id = list_of_values$transcript_id,
                          PID_1 = names(list_of_values[2]),
                          PID_2 = names(list_of_values[3]),
                          jaccard_similarity = pairwise_jaccard[[1]])
  # rbind this_loop with annotation_similarity
  annotation_similarity <- rbind(annotation_similarity, this_loop)
  # remove all PID lists for next loop
  rm(list = ls(pattern = "^PID_"))
}

# plot distribution of jaccard similarities
ggplot(data = annotation_similarity, aes(x = jaccard_similarity)) +
  geom_histogram(binwidth = 0.025) +
  labs(title = "jaccard similarity between transcript annotation locations") +
  theme_minimal()

```

## sliding window similarity


