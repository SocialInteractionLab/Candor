test <- left_join(df, cluster, by = c("PID", "new_topic"))
cluster <- read.csv("./data/output/manually_added_labels_clusters.csv")
# get rid of python
cluster <- cluster[,-1]
cluster <- read.csv("./data/output/manually_added_labels_clusters.csv")
# get rid of python
cluster <- cluster[,-1]
cluster$cluster_label[cluster$cluster_label == ""] <- NA
cluster <- cluster |>
fill(cluster_label, .direction = "down") |>
distinct(new_topic, cluster_label)
View(cluster)
# merge back with raw transcript data
# go back and check why extra rows
test <- left_join(df, cluster, by = "new_topic")
# merge back with raw transcript data
# go back and check why extra rows
merged_df_cluster <- left_join(df, cluster, by = "new_topic")
View(merged_df_cluster)
View(cluster)
cluster |>
is.na(cluster_label)
cluster |>
filter(is.na(cluster_label))
View(df)
df <- df |>
mutate(new_topic = tolower(new_topic))
View(df)
# merge back with raw transcript data
# go back and check why extra rows
merged_df_cluster <- left_join(df, cluster, by = "new_topic")
View(merged_df_cluster)
merged_df_cluster |>
filter(is.na(cluster_label))
# what cluster labels are most common
merged_df_cluster |>
count(cluster_label) |>
arrange(desc(n))
# what cluster labels are most common
merged_df_cluster |>
ungroup() |>
count(cluster_label) |>
arrange(desc(n))
# set script working directory by checking for user (HS home or lab)
if (Sys.info()[[7]] == "helenschmidt") {
knitr::opts_knit$set(root.dir = "/Users/helenschmidt/Library/CloudStorage/GoogleDrive-helenschmidt129@gmail.com/My Drive/SANLab/Experiments/Conversation-Structure/")
} else if (Sys.info()[[7]] == "tuo70125") {
knitr::opts_knit$set(root.dir = "/Users/tuo70125/My Drive/SANLab/Experiments/Conversation-Structure/")}
# packages
library(scales)
library(Rmisc)
library(tidyverse)
cluster <- read.csv("./data/output/manually_added_labels_clusters.csv")
# get rid of python
cluster <- cluster[,-1]
cluster$cluster_label[cluster$cluster_label == ""] <- NA
cluster <- cluster |>
fill(cluster_label, .direction = "down") |>
distinct(new_topic, cluster_label)
df <- df |>
mutate(new_topic = tolower(new_topic))
# load data
df_raw <- read.csv("./data/processed/dense_subset1_and_subset2_processed.csv")
# copy to editable data frame
df <- df_raw
# rename participant ID column
names(df)[21] <- "PID"
# print number of transcripts
paste0("number of annotated transcripts = ", length(na.omit(unique(df$transcript_id))), sep = "")
# print number of participants
paste0("number of participants = ", length(na.omit(unique(df$PID))), sep = "")
# re-scale turn ids so each transcript goes from is 0 - 1
df <- df |>
group_by(transcript_id) |>
arrange(turn_id, .by_group = TRUE) |>
mutate(scaled_turn_id = rescale(turn_id))
# save list of annotated transcript IDs
annotated_IDs <- unique(df$transcript_id)
# how many participants annotated each transcript?
annotation_info <- df |>
group_by(transcript_id) |>
summarize(number_annotators = length(na.omit(unique(PID))))
# fill topics, ensuring PID and topic labels don't overlap between transcripts
df <- df |>
fill(new_topic, .direction = "down") |>
fill(PID, .direction = "down")
# replace "new_topic" NAs at start with "Starting The Call"
df$new_topic[is.na(df$new_topic)] <- "Starting The Call"
# remove rows with starting the call
df <- df |>
filter(new_topic != "Starting The Call")
# preview
head(df)
cluster <- read.csv("./data/output/manually_added_labels_clusters.csv")
# get rid of python
cluster <- cluster[,-1]
cluster$cluster_label[cluster$cluster_label == ""] <- NA
cluster <- cluster |>
fill(cluster_label, .direction = "down") |>
distinct(new_topic, cluster_label)
df <- df |>
mutate(new_topic = tolower(new_topic))
# merge back with raw transcript data
# go back and check why extra rows
merged_df_cluster <- left_join(df, cluster, by = "new_topic")
# what cluster labels are most common
merged_df_cluster |>
ungroup() |>
count(cluster_label) |>
arrange(desc(n))
View(cluster)
View(merged_df_cluster)
# create data frame showing % of transcripts where each cluster topic was discussed per turn ID number
cluster_turns <- merged_df_cluster |>
ungroup() |>
group_by(cluster_label, turn_id) |>
summarize(transcript_count = n())
View(cluster_turns)
# create data frame showing % of transcripts where each cluster topic was discussed per turn ID number
cluster_turns <- merged_df_cluster |>
ungroup() |>
group_by(cluster_label, turn_id) |>
summarize(transcript_count = n(),
transcript_prop = transcript_count / length(unique(transcript_id)))
# create data frame showing % of transcripts where each cluster topic was discussed per turn ID number
cluster_turns <- merged_df_cluster |>
ungroup() |>
group_by(cluster_label, turn_id) |>
summarize(transcript_count = n())
ggplot(data = cluster_turns, aes(x = turn_id, y = transcript_count)) +
facet_wrap(.~cluster_label, ncol = 10, scales = "free")
ggplot(data = cluster_turns, aes(x = turn_id, y = transcript_count)) +
facet_wrap(.~cluster_label, ncol = 8, scales = "free") +
geom_bar(stat = "identity") +
theme_classic()
?facet_wrap
ggplot(data = cluster_turns, aes(x = turn_id, y = transcript_count)) +
facet_wrap(.~cluster_label, ncol = 8, scales = "fixed") +
geom_bar(stat = "identity") +
theme_classic()
ggplot(data = cluster_turns, aes(x = turn_id, y = transcript_count)) +
facet_wrap(.~cluster_label, ncol = 8, scales = "free_y") +
geom_bar(stat = "identity") +
theme_classic()
ggplot(data = cluster_turns, aes(x = turn_id, y = transcript_count)) +
facet_wrap(.~cluster_label, ncol = 8, scales = "free") +
geom_bar(stat = "identity") +
theme_classic()
ggplot(data = cluster_turns, aes(x = turn_id, y = transcript_count,
fill = cluster_label)) +
geom_bar(stat = "identity") +
theme_classic()
ggplot(data = cluster_turns, aes(x = turn_id, y = transcript_count,
fill = cluster_label)) +
geom_bar(stat = "identity") +
theme_classic() +
theme(legend.position = "none")
ggplot(data = cluster_turns, aes(x = turn_id, y = transcript_count,
fill = cluster_label)) +
geom_bar(stat = "identity", binwidth = 10) +
theme_classic() +
theme(legend.position = "none")
?geom_bar
ggplot(data = cluster_turns, aes(x = turn_id, y = transcript_count,
fill = cluster_label)) +
geom_histogram()
ggplot(data = cluster_turns, aes(x = turn_id, y = transcript_count,
fill = cluster_label)) +
geom_bar(stat = "identity") +
theme_classic() +
theme(legend.position = "none")
?rescale
# create data frame showing countof transcripts where each cluster topic was discussed per turn ID number
cluster_turns_binned <- merged_df_cluster |>
group_by(transcript_id) |>
mutate(binned_turn_id = rescale(turn_id, to = c(1,10)))
View(cluster_turns_binned)
View(merged_df_cluster)
# create data frame showing count of transcripts where each cluster topic was discussed per turn ID number
cluster_turns <- merged_df_cluster |>
ungroup() |>
group_by(cluster_label, scaled_turn_id) |>
summarize(transcript_count = n())
ggplot(data = cluster_turns, aes(x = scaled_turn_id, y = transcript_count)) +
facet_wrap(.~cluster_label, ncol = 8, scales = "fixed") +
geom_bar(stat = "identity") +
theme_classic()
# create data frame showing count of transcripts where each cluster topic was discussed per turn ID number
cluster_turns <- merged_df_cluster |>
ungroup() |>
group_by(cluster_label, scaled_turn_id) |>
summarize(transcript_count = n())
ggplot(data = cluster_turns, aes(x = scaled_turn_id, y = transcript_count)) +
facet_wrap(.~cluster_label, ncol = 8, scales = "fixed") +
geom_bar(stat = "identity") +
theme_classic()
View(cluster)
View(cluster_turns)
ggplot(data = cluster_turns, aes(x = scaled_turn_id, y = transcript_count)) +
facet_wrap(.~cluster_label, ncol = 8, scales = "free_y") +
geom_bar(stat = "identity") +
theme_classic()
?cut
# create data frame showing countof transcripts where each cluster topic was discussed per turn ID number
cluster_turns_binned <- merged_df_cluster |>
group_by(transcript_id) |>
mutate(binned_turn_id = cut(turn_id, breaks = 1:10))
View(cluster_turns_binned)
mutate(binned_turn_id = ntile(turn_id, 10)
# create data frame showing countof transcripts where each cluster topic was discussed per turn ID number
cluster_turns_binned <- merged_df_cluster |>
group_by(transcript_id) |>
mutate(binned_turn_id = ntile(turn_id, 10))
View(cluster_turns_binned)
# create data frame showing count of transcripts where each cluster topic was discussed per turn ID number
cluster_turns <- merged_df_cluster |>
ungroup() |>
group_by(transcript_id) |>
mutate(binned_turn_id = ntile(turn_id, 10)) |>
ungroup() |>
group_by(cluster_label, binned_turn_id) |>
summarize(transcript_count = n())
ggplot(data = cluster_turns, aes(x = binned_turn_id, y = transcript_count)) +
facet_wrap(.~cluster_label, ncol = 8, scales = "free_y") +
geom_bar(stat = "identity") +
theme_classic()
ggplot(data = cluster_turns, aes(x = binned_turn_id, y = transcript_count,
fill = cluster_label)) +
geom_bar(stat = "identity") +
theme_classic()
ggplot(data = cluster_turns, aes(x = binned_turn_id, y = transcript_count,
fill = cluster_label)) +
geom_bar(stat = "identity") +
theme_classic() +
theme(legend.position = "none")
ggplot(data = cluster_turns, aes(x = binned_turn_id, y = transcript_count,
fill = cluster_label)) +
geom_bar(stat = "identity") +
theme_classic() +
theme(legend.position = "bottom")
ggplot(data = cluster_turns, aes(x = binned_turn_id, y = transcript_count,
fill = cluster_label)) +
facet_wrap(.~cluster_label, ncol = 8, scales = "free_y") +
geom_bar(stat = "identity") +
theme_classic()
ggplot(data = cluster_turns, aes(x = binned_turn_id, y = transcript_count,
fill = cluster_label)) +
facet_wrap(.~cluster_label, ncol = 8, scales = "free_y") +
geom_bar(stat = "identity") +
theme_classic() +
theme(legend.position = "none")
View(merged_df_cluster)
# create data frame with current/prior topics using cluster labels
# group by participant and add topic numbers
cluster_transitions <- merged_df_cluster |>
ungroup() |>
group_by(PID) |>
mutate(topic_number = 1:n())
View(cluster_transitions)
# create data frame with current/prior topics using cluster labels
# group by participant and add topic numbers
cluster_transitions <- merged_df_cluster |>
ungroup() |>
group_by(PID) |>
arrange(turn_id) |>
mutate(topic_number = 1:n(cluster_label))
# create data frame with current/prior topics using cluster labels
# group by participant and add topic numbers
cluster_transitions <- merged_df_cluster |>
ungroup() |>
group_by(PID) |>
arrange(turn_id) |>
group_by(cluster_label) |>
mutate(topic_number = 1:n())
View(cluster_transitions)
# create data frame with current/prior topics using cluster labels
# group by participant and add topic numbers
cluster_transitions <- merged_df_cluster |>
ungroup() |>
group_by(PID) |>
arrange(turn_id) |>
ungroup() |>
group_by(PID,cluster_label) |>
mutate(topic_number = 1:n())
View(cluster_transitions)
# create data frame with current/prior topics using cluster labels
# group by participant and add topic numbers
cluster_transitions <- merged_df_cluster |>
ungroup() |>
group_by(PID) |>
arrange(turn_id) |>
select(PID, cluster_label)
# create data frame with current/prior topics using cluster labels
# group by participant and add topic numbers
cluster_transitions <- merged_df_cluster |>
select(PID, cluster_label)
# create data frame with current/prior topics using cluster labels
# group by participant and add topic numbers
cluster_transitions <- merged_df_cluster |>
ungroup() |>
select(turn_id, PID, cluster_label)
# create data frame with current/prior topics using cluster labels
# group by participant and add topic numbers
cluster_transitions <- merged_df_cluster |>
ungroup() |>
group_by(PID) |>
arrange(turn_id, .by_group = TRUE) |>
select(turn_id, PID, cluster_label)
# create data frame with current/prior topics using cluster labels
# group by participant and add topic numbers
cluster_transitions <- merged_df_cluster |>
ungroup() |>
group_by(PID) |>
arrange(turn_id, .by_group = TRUE) |>
select(PID, cluster_label) |>
distinct()
# create data frame with current/prior topics using cluster labels
# group by participant and add topic numbers
cluster_transitions <- merged_df_cluster |>
ungroup() |>
group_by(PID) |>
arrange(turn_id, .by_group = TRUE) |>
select(PID, cluster_label) |>
distinct() |>
group_by(PID) |>
mutate(topic_number = 1:n())
# create data frame with current/prior topics using cluster labels
# group by participant and add topic numbers
cluster_transitions <- merged_df_cluster |>
ungroup() |>
group_by(PID) |>
arrange(turn_id, .by_group = TRUE) |>
select(PID, cluster_label) |>
distinct() |>
group_by(PID) |>
mutate(current_topic_number = 1:n(),
current_topic = cluster_label,
prior_topic_number = lag(current_topic_number),
prior_topic = lag(cluster_label))
# create data frame with current/prior topics using cluster labels
# group by participant and add topic numbers
cluster_transitions <- merged_df_cluster |>
ungroup() |>
group_by(PID) |>
arrange(turn_id, .by_group = TRUE) |>
select(PID, cluster_label) |>
distinct() |>
group_by(PID) |>
mutate(current_topic_number = 1:n(),
current_topic = cluster_label,
prior_topic_number = lag(current_topic_number),
prior_topic = lag(cluster_label)) |>
na.omit()
# count up instances of each transition
transitions <- cluster_transitions |>
group_by(prior_topic, current_topic) |>
summarize(transition_count = n())
View(transitions)
# get total sum of all transition counts
transition_sum <- sum(transitions$transition_count)
# create table of transition counts
transition_table <- table(transitions$prior_topic, transitions$current_topic)
View(transitions)
# convert counts to probabilities
transition_matrix <- prop.table(transition_table, margin = 1)
transition_matrix
# make matrix into a data frame
transitions_df <- as.data.frame(as.table(transition_matrix))
View(transitions_df)
# rename variables
colnames(transitions_df) <- c("prior_topic", "current_topic", "probability")
# plot!
ggplot(transitions_df, aes(x = prior_topic, y = current_topic, fill = probability)) +
geom_tile(color = "white") + # Color tiles with white borders
scale_fill_gradient(low = "white", high = "blue") + # Color gradient
labs(title = "Transition Probability Matrix",
x = "Prior State",
y = "Current State",
fill = "Probability") +
theme_minimal() + # Minimal theme
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotate x-axis labels for readability
# plot!
ggplot(transitions_df, aes(x = prior_topic, y = current_topic,
fill = probability)) +
geom_tile(color = "white") +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Transition Matrix (overall)",
x = "Prior Topic", y = "Current Topic", fill = "Probability") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# plot!
ggplot(transitions_df, aes(x = prior_topic, y = current_topic,
fill = probability)) +
geom_tile(color = "white") +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Transition Matrix (overall)",
x = "Prior Topic", y = "Current Topic", fill = "Probability") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5))
# get total sum of all transition counts
transition_sum <- sum(transitions$transition_count)
# create table of transition counts
transition_table <- table(transitions$prior_topic, transitions$current_topic)
# convert counts to conditional probabilities
transition_matrix_cond <- prop.table(transition_table, margin = 2)
# make matrix into a data frame
transitions_df_cond <- as.data.frame(as.table(transition_matrix_cond))
# rename variables
colnames(transitions_df_cond) <- c("prior_topic", "current_topic", "probability")
# plot!
ggplot(transitions_df_cond, aes(x = prior_topic, y = current_topic,
fill = probability)) +
geom_tile(color = "white") +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Transition Matrix (conditional)",
x = "Prior Topic", y = "Current Topic", fill = "Probability") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5))
# plot!
ggplot(transitions_df_cond, aes(x = prior_topic, y = current_topic,
fill = probability)) +
geom_tile(color = "white") +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Transition Matrix (conditional)",
caption = "transition probabilities conditional on the current topic",
x = "Prior Topic", y = "Current Topic", fill = "Probability") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5))
?prop.table
# get total sum of all transition counts
transition_sum <- sum(transitions$transition_count)
# create table of transition counts
transition_table <- table(transitions$prior_topic, transitions$current_topic)
# convert counts to probabilities
transition_matrix <- prop.table(transition_table, margin = NULL)
# make matrix into a data frame
transitions_df <- as.data.frame(as.table(transition_matrix))
# rename variables
colnames(transitions_df) <- c("prior_topic", "current_topic", "probability")
# plot!
ggplot(transitions_df, aes(x = prior_topic, y = current_topic,
fill = probability)) +
geom_tile(color = "white") +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Transition Matrix (overall)",
x = "Prior Topic", y = "Current Topic", fill = "Probability") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5))
# get total sum of all transition counts
transition_sum <- sum(transitions$transition_count)
# create table of transition counts
transition_table <- table(transitions$prior_topic, transitions$current_topic)
# convert counts to probabilities
transition_matrix <- prop.table(transition_table, margin = c(1,2))
# make matrix into a data frame
transitions_df <- as.data.frame(as.table(transition_matrix))
# rename variables
colnames(transitions_df) <- c("prior_topic", "current_topic", "probability")
# plot!
ggplot(transitions_df, aes(x = prior_topic, y = current_topic,
fill = probability)) +
geom_tile(color = "white") +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Transition Matrix (overall)",
x = "Prior Topic", y = "Current Topic", fill = "Probability") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5))
# get total sum of all transition counts
transition_sum <- sum(transitions$transition_count)
# create table of transition counts
transition_table <- table(transitions$prior_topic, transitions$current_topic)
# convert counts to probabilities
transition_matrix <- prop.table(transition_table, margin = 1)
# make matrix into a data frame
transitions_df <- as.data.frame(as.table(transition_matrix))
# rename variables
colnames(transitions_df) <- c("prior_topic", "current_topic", "probability")
# plot!
ggplot(transitions_df, aes(x = prior_topic, y = current_topic,
fill = probability)) +
geom_tile(color = "white") +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Transition Matrix (conditional on prior topic)",
x = "Prior Topic", y = "Current Topic", fill = "Probability") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5))
# get total sum of all transition counts
transition_sum <- sum(transitions$transition_count)
# create table of transition counts
transition_table <- table(transitions$prior_topic, transitions$current_topic)
# convert counts to probabilities
transition_matrix <- prop.table(transition_table, margin = 1)
# make matrix into a data frame
transitions_df <- as.data.frame(as.table(transition_matrix))
# rename variables
colnames(transitions_df) <- c("prior_topic", "current_topic", "probability")
# plot!
ggplot(transitions_df, aes(x = prior_topic, y = current_topic,
fill = probability)) +
geom_tile(color = "white") +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Transition Matrix (conditional on prior topic)",
x = "Prior Topic", y = "Current Topic", fill = "Probability") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5))
